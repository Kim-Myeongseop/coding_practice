def solution(n, money):
    dp = [1] + [0 for _ in range(n)]   # 경우의 수 저장 : bottom to top 방식
    for coin in money:
        for amount in range(coin, n+1):
            dp[amount] += dp[amount-coin]
    answer = dp[n]
    return answer%1_000_000_007
    '''
    작은 동전부터 시작하여 작업한다. 첫 작업을 위해 0을 만드는 경우의 수는 1개로 저장한다.
    
    중간 시점에서 보면, 이전의 동전들을 사용해서 만들 수 있는 경우의 수를 dp에 저장하고 있는 상황.
    그러면 내가 작업해야 할 동전을 추가함으로써 경우의 수가 어떻게 늘어나는 지를 계산하면 된다.
    
    내가 작업해야 하는 동전이 x원이고, 만들어야 하는 금액이 y원이라면, y-x를 만드는 모든 경우에
    x원을 추가하면, y원이 되기 때문에 x원짜리 동전이 생김으로써 y원을 만드는 경우의 수는 y-x를 만드는 경우의 수
    만큼 추가된다.
    (이 작업을 작은 동전부터, 작은 금액부터 만들어가기 때문에 y-x를 만드는 경우의 수는 이미 업데이트 돼있다.)
    '''